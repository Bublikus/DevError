/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/DevError.js":
/*!*************************!*\
  !*** ./src/DevError.js ***!
  \*************************/
/*! exports provided: DevError, DevErrorService, ResponseError, ResponseErrorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DevError\", function() { return DevError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DevErrorService\", function() { return DevErrorService; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResponseError\", function() { return ResponseError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ResponseErrorService\", function() { return ResponseErrorService; });\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable */ \"./src/observable.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// It's fucking 3:00am and it's fucking done.\n\n/**\n * Default error types:\n *\n * EvalError - Raised when the eval() functions is used in an incorrect manner.\n * RangeError - Raised when a numeric variable exceeds its allowed range.\n * ReferenceError - Raised when an invalid reference is used.\n * SyntaxError - Raised when a syntax error occurs while parsing JavaScript code.\n * TypeError - Raised when the type of a variable is not as expected.\n * URIError - Raised when the encodeURI() or decodeURI() functions are used in an incorrect manner.\n */\n\n/**\n * Custom error types:\n *\n * DevError - Base error in development.\n * Informational - Information responses.\n * Success - Successful responses.\n * Redirection - Redirection messages.\n * Client - Client error responses.\n * Server - Server error responses.\n */\n\n/**\n * @TODO\n * ValidationError\n * Normalize ResponseError instance\n * Normalize import modules from different files\n */\n// ------------------------------------======================================------------------------------------\n\n/**\n *\n * @class DevError\n *\n * @description Core class of development error.\n *\n */\n\nvar DevError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(DevError, _Error);\n\n  function DevError(error, options) {\n    var _this;\n\n    _classCallCheck(this, DevError);\n\n    var devErrorService = new DevErrorService();\n    var devErrorObservable = new _observable__WEBPACK_IMPORTED_MODULE_0__[\"DevErrorObservable\"]();\n    var responseErrorService = new ResponseErrorService();\n    var config = _typeof(options) === 'object' && !Array.isArray(options) && !!options ? options : {};\n    config.error = error;\n    var status = (config.error || {}).status;\n\n    if (status > 0) {\n      config = responseErrorService.getConfig(error, options);\n    } else {\n      config = devErrorService.getConfig(config);\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DevError).call(this, config.message)); // Maintains proper stack trace for where our error was thrown (only available on V8)\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(_assertThisInitialized(_this), DevError);\n    }\n\n    _this.config = config;\n    _this.name = config.name;\n    _this.data = config.data;\n    _this.error = config.error;\n    _this.status = config.status;\n    _this.message = config.message;\n    _this.description = config.description;\n    _this.created = devErrorService.getISOTime();\n\n    if (typeof config.name === 'string' && config.name !== _this.constructor.name) {\n      devErrorObservable.notify(config, config.name);\n    }\n\n    devErrorObservable.notify(config);\n    return _this;\n  }\n\n  return DevError;\n}(_wrapNativeSuper(Error)); // ------------------------------------======================================------------------------------------\n\n/**\n *\n * @class DevErrorService\n *\n * @description Service of the core class of development error.\n *\n */\n\nvar DevErrorService =\n/*#__PURE__*/\nfunction () {\n  function DevErrorService() {\n    _classCallCheck(this, DevErrorService);\n  }\n\n  _createClass(DevErrorService, [{\n    key: \"getConfig\",\n\n    /**\n     *\n     * @description Coordinator for getting config from smaller actions.\n     *\n     * @param {object} config - properties of the error.\n     *\n     * @return {object} - Enhanced config.\n     *\n     */\n    value: function getConfig(config) {\n      return {\n        status: this.getStatus(config, 0),\n        name: this.getName(config, 'DevError'),\n        data: this.toDefaultType(config, 'data', {}),\n        error: this.toDefaultType(config, 'error', {}),\n        message: this.getMessage(config, 'Sorry! Error has occurred in the app.'),\n        description: this.getDescription(config, \"This feature probably does not work properly. Please, notify us and we'll fix it.\")\n      };\n    }\n    /**\n     *\n     * @description Util for getting message from custom, error and default values.\n     *\n     * @param {object} config - properties of the error.\n     * @param {string} defaultVal - default value.\n     *\n     * @return {string} - New normalized message.\n     *\n     * @examples\n     * getMessage(config) === '...blah...bla... Dev Error ...blah!'\n     *\n     */\n\n  }, {\n    key: \"getMessage\",\n    value: function getMessage(config, defaultVal) {\n      var isNoInternet = (config.error || {}).message === 'Failed to fetch';\n      var errorName = config.name || (config.error || {}).name;\n      return typeof config.error === 'string' && config.error || config.message || isNoInternet && \"You have no internet connection.\" || errorName && \"Sorry! \".concat(this.addSpaces(errorName), \" has occurred in the app.\") || defaultVal;\n    }\n    /**\n     *\n     * @description Util for getting description from custom, error and default values.\n     *\n     * @param {object} config - properties of the error.\n     * @param {string} defaultVal - default value.\n     *\n     * @return {string} - New normalized description.\n     *\n     * @examples\n     * getDescription(config) === '...blah...bla... Dev Error ...blah!'\n     *\n     */\n\n  }, {\n    key: \"getDescription\",\n    value: function getDescription(config, defaultVal) {\n      var appErrorMsg = (config.error || {}).message;\n      var isNoInternet = appErrorMsg === 'Failed to fetch';\n      return config.description || isNoInternet && \"Make sure you are online.\" || appErrorMsg && \"This feature probably does not work properly, cause of in-app error: \\\"\".concat(appErrorMsg, \"\\\".\\nPlease, notify us and we'll fix it.\") || defaultVal;\n    }\n    /**\n     *\n     * @description Util for getting name for error from custom, error and default values.\n     *\n     * @param {object} config - properties of the error.\n     * @param {string} defaultVal - default value.\n     *\n     * @return {string} - Custom name of an error.\n     *\n     * @examples\n     * getName(config) === 'DevError'\n     *\n     */\n\n  }, {\n    key: \"getName\",\n    value: function getName(config, defaultVal) {\n      var appErrorMsg = (config.error || {}).message;\n      var isNoInternet = appErrorMsg === 'Failed to fetch';\n      return config.name || isNoInternet && 'ConnectionError' || (config.error || {}).name || defaultVal;\n    }\n    /**\n     *\n     * @description Util for getting status of an error from custom, error and default values.\n     *\n     * @param {object} config - properties of the error.\n     * @param {number} defaultVal - default value.\n     *\n     * @return {number} - status of an error. 0 - dev error.\n     *\n     * @examples\n     * getName(config) === 200\n     *\n     */\n\n  }, {\n    key: \"getStatus\",\n    value: function getStatus(config, defaultVal) {\n      return config.status || (config.error || {}).status || defaultVal;\n    }\n    /**\n     *\n     * @description Util for getting ISO time for avoiding timezones.\n     *\n     * @return {string} - Current UTC time in string.\n     *\n     * @examples\n     * getISOTime() === '2019-10-17T21:55:49.365Z'\n     *\n     */\n\n  }, {\n    key: \"getISOTime\",\n    value: function getISOTime() {\n      return new Date().toISOString();\n    }\n    /**\n     * @description Util for adding spaces between camelCases.\n     *\n     * @param {string} str - simple sting.\n     *\n     * @return {string} - Changed string with spaces.\n     *\n     */\n\n  }, {\n    key: \"addSpaces\",\n    value: function addSpaces(str) {\n      return str.replace(/([A-Z])/g, ' $1').trim();\n    }\n    /**\n     * @description Util for typed getting property from data.\n     *\n     * @param {*} data - any data.\n     * @param {string} field - name of property in the data.\n     * @param {*} defaultValue - return value should have the same type and got property.\n     *\n     * @return {*} - Result of getting correct property from data.\n     *\n     */\n\n  }, {\n    key: \"toDefaultType\",\n    value: function toDefaultType(data, field, defaultValue) {\n      if (!data || typeof field !== 'string') {\n        return defaultValue;\n      }\n\n      function safeGetter(obj, i) {\n        try {\n          return obj[i];\n        } catch (e) {\n          return undefined;\n        }\n      }\n\n      var result = field.split('.').reduce(safeGetter, data);\n      return defaultValue !== undefined ? this.isSameType(result, defaultValue) ? result : defaultValue : result;\n    }\n    /**\n     * @description Util for checking whether type of a is the same as type of b.\n     *\n     * @param {*} a - any data.\n     * @param {*} b - any data.\n     *\n     * @return {boolean}\n     *\n     */\n\n  }, {\n    key: \"isSameType\",\n    value: function isSameType(a, b) {\n      var rules = [function (aa, bb) {\n        return _typeof(aa) === _typeof(bb);\n      }, function (aa, bb) {\n        return +aa === aa === (+bb === bb);\n      }, // whether one is NaN\n      function (aa, bb) {\n        return aa === null === (bb === null);\n      }, // null is object type too\n      function (aa, bb) {\n        return Array.isArray(aa) === Array.isArray(bb);\n      } // array is object type too\n      ];\n      return !rules.some(function (ruleFn) {\n        return !ruleFn(a, b);\n      });\n    }\n  }]);\n\n  return DevErrorService;\n}(); // ------------------------------------======================================------------------------------------\n\n/**\n *\n * @class ResponseError\n *\n * @description Core class of Response error.\n *\n */\n\nvar ResponseError =\n/*#__PURE__*/\nfunction (_DevError) {\n  _inherits(ResponseError, _DevError);\n\n  function ResponseError(error, options) {\n    var _this2;\n\n    _classCallCheck(this, ResponseError);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ResponseError).call(this, error, options));\n    var responseErrorService = new ResponseErrorService();\n    var config = responseErrorService.getConfig(error, options);\n    _this2.name = config.name;\n    _this2.data = config.data;\n    _this2.error = config.error;\n    _this2.status = config.status;\n    _this2.message = config.message;\n    _this2.description = config.description;\n    _this2.created = _this2.config.created;\n    return _this2;\n  }\n\n  return ResponseError;\n}(DevError); // ------------------------------------======================================------------------------------------\n\n/**\n *\n * @class ResponseErrorService\n *\n * @description Service of the core class of Response error.\n *\n */\n\nvar ResponseErrorService =\n/*#__PURE__*/\nfunction (_DevErrorService) {\n  _inherits(ResponseErrorService, _DevErrorService);\n\n  function ResponseErrorService() {\n    _classCallCheck(this, ResponseErrorService);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ResponseErrorService).apply(this, arguments));\n  }\n\n  _createClass(ResponseErrorService, [{\n    key: \"getConfig\",\n\n    /**\n     *\n     * @param {object} error - original error.\n     * @param {object} [options] - properties of an error.\n     *\n     * @return {object} - Enhanced config.\n     *\n     * @examples\n     * getConfig(config) === {...}\n     *\n     */\n    value: function getConfig(error, options) {\n      var config = _typeof(options) === 'object' && !Array.isArray(options) && !!options ? options : {};\n      config.error = error;\n      this.config = config;\n      var status = (config.error || {}).status;\n\n      if (status > 0 && status < 200) {\n        return this.getErrorConfigFor('informational');\n      } else if (status >= 200 && status < 300) {\n        return this.getErrorConfigFor('success');\n      } else if (status >= 300 && status < 400) {\n        return this.getErrorConfigFor('redirection');\n      } else if (status >= 400 && status < 500) {\n        return this.getErrorConfigFor('client');\n      } else if (status >= 500) {\n        return this.getErrorConfigFor('server');\n      } else {\n        return new DevErrorService().getConfig(config);\n      }\n    }\n    /**\n     *\n     * @param {string} type - key of subscriptions group.\n     *\n     * @return {object} - Enhanced config.\n     *\n     * @examples\n     * getErrorConfigFor('informational') === {...}\n     *\n     */\n\n  }, {\n    key: \"getErrorConfigFor\",\n    value: function getErrorConfigFor(type) {\n      return this.errorTypes(this.config)[type]();\n    }\n    /**\n     *\n     * @param {object} config - properties of an error.\n     *\n     * @description Returns object of actions by given type.\n     *\n     */\n\n  }, {\n    key: \"errorTypes\",\n    value: function errorTypes(config) {\n      var _this3 = this;\n\n      return {\n        informational: function informational() {\n          return _objectSpread({}, config, {\n            name: _this3.getName(config, 'Informational'),\n            status: _this3.getStatus(config, 0),\n            data: _this3.toDefaultType(config, 'data', {}),\n            error: _this3.toDefaultType(config, 'error', {}),\n            message: _this3.getMessage(config, 'Informational error has occurred in the app.'),\n            description: _this3.getDescription(config, \"This feature probably does not work properly. Please, notify us and we'll fix it.\")\n          });\n        },\n        success: function success() {\n          return _objectSpread({}, config, {\n            name: _this3.getName(config, 'Success'),\n            status: _this3.getStatus(config, 0),\n            message: _this3.getMessage(config, 'Great!'),\n            data: _this3.toDefaultType(config, 'data', {}),\n            error: _this3.toDefaultType(config, 'error', {}),\n            description: _this3.getDescription(config, \"All data was saved!\")\n          });\n        },\n        redirection: function redirection() {\n          return _objectSpread({}, config, {\n            name: _this3.getName(config, 'Redirection'),\n            status: _this3.getStatus(config, 0),\n            data: _this3.toDefaultType(config, 'data', {}),\n            error: _this3.toDefaultType(config, 'error', {}),\n            message: _this3.getMessage(config, 'Oops. Redirection error has occurred in the app.'),\n            description: _this3.getDescription(config, \"This feature probably does not work properly. Please, notify us and we'll fix it.\")\n          });\n        },\n        client: function client() {\n          return _objectSpread({}, config, {\n            name: _this3.getName(config, 'Client'),\n            status: _this3.getStatus(config, 0),\n            data: _this3.toDefaultType(config, 'data', {}),\n            error: _this3.toDefaultType(config, 'error', {}),\n            message: _this3.getMessage(config, 'Oops. Wrong data goes from the client side.'),\n            description: _this3.getDescription(config, \"This feature probably does not work properly. Please, notify us and we'll fix it.\")\n          });\n        },\n        server: function server() {\n          return _objectSpread({}, config, {\n            name: _this3.getName(config, 'Server'),\n            status: _this3.getStatus(config, 0),\n            data: _this3.toDefaultType(config, 'data', {}),\n            error: _this3.toDefaultType(config, 'error', {}),\n            message: _this3.getMessage(config, 'Oops. Wrong data goes from the server side.'),\n            description: _this3.getDescription(config, \"This feature probably does not work properly. Please, notify us and we'll fix it.\")\n          });\n        }\n      };\n    }\n    /**\n     *\n     * @param {object} config - properties of error.\n     * @param {object|string} config.error - original error.\n     * @param {string?} config.message - custom dev message title.\n     *\n     * @param {string} defaultVal - default message.\n     *\n     * @return {string} - New normalized message\n     *\n     * @examples\n     * getMessage(config) === '...blah...bla... Response Error ...blah!'\n     *\n     */\n\n  }, {\n    key: \"getMessage\",\n    value: function getMessage(config, defaultVal) {\n      return typeof config.error === 'string' && config.error || config.message || defaultVal;\n    }\n  }]);\n\n  return ResponseErrorService;\n}(DevErrorService); // ------------------------------------======================================------------------------------------\n\n//# sourceURL=webpack:///./src/DevError.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: tryToDo, DevError, DevErrorService, ResponseError, ResponseErrorService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tryToDo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tryToDo */ \"./src/tryToDo.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"tryToDo\", function() { return _tryToDo__WEBPACK_IMPORTED_MODULE_0__[\"tryToDo\"]; });\n\n/* harmony import */ var _DevError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DevError */ \"./src/DevError.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DevError\", function() { return _DevError__WEBPACK_IMPORTED_MODULE_1__[\"DevError\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DevErrorService\", function() { return _DevError__WEBPACK_IMPORTED_MODULE_1__[\"DevErrorService\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ResponseError\", function() { return _DevError__WEBPACK_IMPORTED_MODULE_1__[\"ResponseError\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ResponseErrorService\", function() { return _DevError__WEBPACK_IMPORTED_MODULE_1__[\"ResponseErrorService\"]; });\n\n\n\n\n\n/**\n * @examples\n */\n\nfunction getData(variable) {\n  variable / constant;\n}\n\nvar tryToGetData = Object(_tryToDo__WEBPACK_IMPORTED_MODULE_0__[\"tryToDo\"])(getData, {\n  noConsole: true\n})();\n\nif (tryToGetData instanceof _DevError__WEBPACK_IMPORTED_MODULE_1__[\"DevError\"]) {\n  console.log('name: ', tryToGetData.name);\n  console.log('status: ', tryToGetData.status);\n  console.log('message: ', tryToGetData.message);\n  console.log('description: ', tryToGetData.description);\n}\n\nconsole.log('------------------------------======================================------------------------------');\n\nfunction throwStatus() {\n  throw {\n    status: 300\n  };\n}\n\nvar tryToGetFetch = Object(_tryToDo__WEBPACK_IMPORTED_MODULE_0__[\"tryToDo\"])(throwStatus, {\n  noConsole: true\n})();\n\nif (tryToGetFetch instanceof _DevError__WEBPACK_IMPORTED_MODULE_1__[\"DevError\"]) {\n  console.log('name: ', tryToGetFetch.name);\n  console.log('status: ', tryToGetFetch.status);\n  console.log('message: ', tryToGetFetch.message);\n  console.log('description: ', tryToGetFetch.description);\n}\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/observable.js":
/*!***************************!*\
  !*** ./src/observable.js ***!
  \***************************/
/*! exports provided: DevErrorObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DevErrorObservable\", function() { return DevErrorObservable; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n *\n * @class DevErrorObservable\n *\n * @description Observer, singleton.\n *\n */\nvar DevErrorObservable =\n/*#__PURE__*/\nfunction () {\n  function DevErrorObservable() {\n    _classCallCheck(this, DevErrorObservable);\n\n    if (DevErrorObservable.instance) return DevErrorObservable.instance;\n    DevErrorObservable.instance = this;\n    this.observers = [];\n    this.typedObservers = {};\n  }\n  /**\n   *\n   * @description Add the ability to subscribe to a new object essentially,\n   * add something to the observers array.\n   *\n   * @param {function} cb - callback of subscription.\n   * @param {string} type - key of grouped subscriptions.\n   *\n   */\n\n\n  _createClass(DevErrorObservable, [{\n    key: \"subscribe\",\n    value: function subscribe(cb, type) {\n      if (type && typeof type === 'string') {\n        this.typedObservers[type] = [].concat(this.typedObservers[type] || [], cb || []);\n      } else {\n        this.observers.push(cb);\n      }\n    }\n    /**\n     *\n     * @description Add the ability to unsubscribe from a particular object essentially,\n     * remove something from the observers array.\n     *\n     * @param {function} cb - callback of subscription.\n     * @param {string} type - key of grouped subscriptions.\n     *\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(cb, type) {\n      if (type && typeof type === 'string') {\n        this.typedObservers[type] = [].concat(this.typedObservers[type] || []).filter(function (subscriber) {\n          return subscriber !== cb;\n        });\n      } else {\n        this.observers = this.observers.filter(function (subscriber) {\n          return subscriber !== cb;\n        });\n      }\n    }\n    /**\n     *\n     * @description Update all subscribed objects\n     * and pass some data to each of them.\n     *\n     * @param {*} data - any data sent to subscription.\n     * @param {string} [type] - key of grouped subscriptions.\n     *\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(data, type) {\n      if (type && typeof type === 'string') {\n        (this.typedObservers[type] || []).forEach(function (observer) {\n          return observer(data);\n        });\n      } else {\n        this.observers.forEach(function (observer) {\n          return observer(data);\n        });\n      }\n    }\n  }]);\n\n  return DevErrorObservable;\n}();\n\n//# sourceURL=webpack:///./src/observable.js?");

/***/ }),

/***/ "./src/tryToDo.js":
/*!************************!*\
  !*** ./src/tryToDo.js ***!
  \************************/
/*! exports provided: tryToDo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tryToDo\", function() { return tryToDo; });\n/* harmony import */ var _DevError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DevError */ \"./src/DevError.js\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n/**\n *\n * @function tryToDo\n *\n * @description Decorator above unstable function for catching readable messages for a user.\n *\n * @param {function} doFn - trying to call a function.\n *\n * @param {object} [options] - additional options for error.\n * @param {boolean} [options.throw] - for throwing error.\n * @param {boolean} [options.noConsole] - for hiding console warnings.\n *\n * @throws {object} - enhanced error with information.\n * @return {object} - enhanced error with information.\n *\n * @example\n * const tryToGetTable = tryToDo(function getTable(...args) {\n *   eval('nruter wen ved rorre / finity')\n * })(...args) - throws new DevError\n * @example\n * const tryToGetTable = tryToDo((...args) => {\n *   letconst x = get:x-of-point\n *   letconst y = get:y-of-point\n * }, {\n *  message: \"Sorry for dev error :(\"\n * })(...args) - throws new DevError\n * @example\n * const tryToGetTable = tryToDo(get)('/get/table') - throws new DevError\n * if (tryToGetTable instanceof DevError) return ':('\n *\n */\n\nvar tryToDo = function tryToDo(doFn, options) {\n  return function () {\n    if (typeof doFn !== 'function') {\n      console.warn('The tryToDo decorator should take a function as the first argument.');\n      return;\n    }\n\n    var config = _typeof(options) === 'object' && !Array.isArray(options) && !!options ? options : {};\n\n    try {\n      return doFn.apply(void 0, arguments);\n    } catch (e) {\n      var error = e && e.status && Number.isFinite(e.status) ? new _DevError__WEBPACK_IMPORTED_MODULE_0__[\"ResponseError\"](e) : new _DevError__WEBPACK_IMPORTED_MODULE_0__[\"DevError\"](e);\n\n      if (!config.noConsole) {\n        console.warn(error);\n      }\n\n      if (config[\"throw\"]) {\n        throw error;\n      } else {\n        return error;\n      }\n    }\n  };\n};\n\n//# sourceURL=webpack:///./src/tryToDo.js?");

/***/ })

/******/ });